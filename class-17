// Function Scoping
function experimentation() {
    var primaryValue = 20; // Function-scoped variable
    let secondaryValue = 100; // Block-scoped variable
    console.log(primaryValue);

    // Block scope
    if (1) {
        var scopedVariable = 'block scoped'; // var is not block-scoped
        console.log('Inside If', scopedVariable);
        console.log(primaryValue);
    }
    console.log('Outside if', scopedVariable);
}

experimentation(); // invoking a function

var label = 'Cryptic'; // Global variable
let currentYear = 2020; // Global variable

function trial() {
    console.log(label);
    console.log(currentYear);
}

trial();

// Function Declaration and Function Expression
myFunction(); // Function declaration is hoisted

function myFunction() {
    console.log('Inside myFunction Declaration');
}

// Function expression
let myFunction2 = function () {
    console.log('Inside myFunction2: function expression');
}

console.log(newLabel); // Undefined, as the variable is hoisted but not initialized yet

var newLabel = 'Mysterious'; // Hoisted but not initialized yet

function anotherLabel() {
    console.log('greetings');
}

// Arrow Functions - ES6 Feature
let arrowFunction = () => {
    console.log('Arrow Functions Created');
    console.log(this); // 'this' in arrow functions refers to the enclosing context (lexical scoping)
}

arrowFunction();

let regularFunction = function () {
    console.log(' Function expression Created');
    console.log(this); // 'this' in regular functions depends on how they are called
}

regularFunction();

let anonymousFunction = argument => console.log(argument); // Arrow function with a single argument

anonymousFunction('hidden'); // argument
